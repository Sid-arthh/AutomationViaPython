import yaml
import re
import sys
import os
import subprocess
def read_file(file_path):
    with open(file_path, 'r') as f:
        content = f.read()
    return content

def process_template(template_file):
    template_dir = os.path.dirname(template_file)
    s3p_file = template_file
    template_content = read_file(s3p_file)
    s3p_template = yaml.safe_load(template_content)

    template_value = s3p_template.get('template', '')
    template_file_name = template_value + '.yml'  
    s3_file = os.path.join(template_dir, template_file_name)

    if not os.path.exists(s3_file):
        template_file_name = template_value + '.yaml'
        s3_file = os.path.join(template_dir, template_file_name)

    s3_content = read_file(s3_file)
    s3_template = yaml.safe_load(s3_content)

  
    def replace_values(data, replacements):
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, str):
                    matches = re.findall(r'\w+\.\w+', value)
                    for match in matches:
                        parts = match.split('.')
                        if parts[0] in replacements:
                            replace_key = parts[0]
                            replace_value = parts[1]
                            if replace_key in replacements:
                                nested_value = replacements[replace_key]
                                new_value = get_nested_value(nested_value, replace_value)
                                if new_value is not None:
                                    data[key] = data[key].replace(match, new_value)
                else:
                    replace_values(value, replacements)
        elif isinstance(data, list):
            for item in data:
                replace_values(item, replacements)


    def get_nested_value(data, key):
        if isinstance(data, dict):
            if key in data:
                return data[key]
            for value in data.values():
                nested_value = get_nested_value(value, key)
                if nested_value is not None:
                    return nested_value
        elif isinstance(data, list):
            for item in data:
                nested_value = get_nested_value(item, key)
                if nested_value is not None:
                    return nested_value
        return None


    replacements = {}
    for key, value in s3p_template.items():
        if isinstance(value, dict):
            replacements[key] = value


    replace_values(s3_template, replacements)

    formatted_content = yaml.dump(s3_template, sort_keys=False)

    with open('out.yml', 'w') as f:
        f.write(formatted_content)


    # deploy command
    bash_command = f"aws cloudformation deploy --template-file out.yml --stack-name {template_value} --capabilities CAPABILITY_NAMED_IAM --region us-east-1"
    subprocess.run(bash_command, shell=True)

# Starting Poing  is here.....
if len(sys.argv) < 2:
    print("Please provide the template file as a command-line argument.")
    sys.exit(1)

template_file = sys.argv[1]

process_template(template_file)

