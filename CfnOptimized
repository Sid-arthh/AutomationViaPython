import yaml
import re
import sys
import os
import subprocess
def read_file(file_path):
    with open(file_path, 'r') as f:
        content = f.read()
    return content

def process_template(template_file):
    template_dir = os.path.dirname(template_file)
    parameter_file = template_file
    template_content = read_file(parameter_file)
    parameter_template = yaml.safe_load(template_content)

    template_value = parameter_template.get('template', '')
    template_file_name = template_value + '.yml'  
    resource_file = os.path.join(template_dir, template_file_name)

    if not os.path.exists(resource_file):
        template_file_name = template_value + '.yaml'
        resource_file = os.path.join(template_dir, template_file_name)

    resource_content = read_file(resource_file)
    resource_template = yaml.safe_load(resource_content)

  
    def replace_values(data, replacements):
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, str) and '.' in value:
                        parts = value.split('.')
                        if parts[0] in replacements:
                            replace_key = parts[0]
                            replace_value = parts[1]
                            nested_value = replacements[replace_key]
                            new_value = get_nested_value(nested_value, replace_value)
                            if new_value is not None:
                                data[key] = data[key].replace(value, new_value)
                else:
                    replace_values(value, replacements)

        elif isinstance(data, list):
            for item in data:
                replace_values(item, replacements)

    def get_nested_value(data, key):
        if isinstance(data, dict):
            if key in data:
                return str(data[key])
        else:
             return None

    replacements = {}
    for key, value in parameter_template.items():
        if isinstance(value, dict):
            replacements[key] = value

    replace_values(resource_template, replacements)

    formatted_content = yaml.dump(resource_template, sort_keys=False)

    with open('out.yml', 'w') as f:
        f.write(formatted_content)

    # deploy command
    # bash_command = f"aws cloudformation deploy --template-file out.yml --stack-name {template_value} --capabilities CAPABILITY_NAMED_IAM --region us-east-1"
    # subprocess.run(bash_command, shell=True)
print("out.yml is your ouput file ")
# Starting Poing  is here.....
if len(sys.argv) < 2:
    print("Please provide the template file as a command-line argument.")
    sys.exit(1)

template_file = sys.argv[1]

process_template(template_file)
